version: '3.7'

services:
  database:
    image: mysql:latest
    container_name: database
    restart: always
    volumes:
      - db-data:/var/lib/mysql
      - ./rigup_database:/docker-entrypoint-initdb.d
    ports:
      - '3306:3306'
    environment:
      - MYSQL_ROOT_PASSWORD=secretadmin
      - MYSQL_DATABASE=rigdb_rev2
    networks:
      - network-3
        
  backend:
    build:
      # args:
      # - NODE_ENV=development
      context: rigup_backend
    # command: npm run start-watch
    container_name: backend
    environment:
      # - DATABASE_DB=example
      # - DATABASE_USER=root
      # - DATABASE_PASSWORD=/run/secrets/db-password
      # - DATABASE_HOST=db
      # - NODE_ENV=development
      - HOST=database
      - MYSQL_PASSWORD=secretadmin
      - PORT=2000
      - SECRET_KEY=asdf1234zxc.
      - FRONTEND_URL=http://frontend:80
    ports:
      - 2000:2000
    # secrets:
    #   - db-password
    volumes:
      # - ./backend/src:/code/src:ro
      # - ./backend/package.json:/code/package.json
      # - ./backend/package-lock.json:/code/package-lock.json
      - back-notused:/opt/app/node_modules
    networks:
      - network-3
    depends_on:
      - database

  frontend:
    build:
      context: rigup_frontend
      #image: rigup_frontend:latest
      #target: development
    container_name: frontend
    ports:
      - 3000:80
    volumes:
      - ./rigup_frontend/src:/app/src
      - /app/node_modules
    environment:
      - API_URL=http://backend:2000
      - NODE_ENV=production
      - PUBLIC_URL=http://localhost:80
    networks:
      - network-3
    depends_on:
      - backend

  # backend:
  #   depends_on:
  #     - rigup_db
  #   image: rigup_backend:latest
  #   restart: always
  #   ports:
  #     - '2000:2000'
  #   restart: always
  #   networks:
  #     - network-3

  # frontend:
  #   depends_on:
  #     - rigup_be
  #   image: rigup_frontend:latest
  #   restart: always
  #   ports:
  #     - '3000:80'
  #   restart: always
  #   volumes:
  #     - ./rigup_frontend:/app
  #   networks:
  #     - network-3

# Networks to be created to facilitate communication between containers
networks:
  network-3:

volumes:
  db-data:
  back-notused:
